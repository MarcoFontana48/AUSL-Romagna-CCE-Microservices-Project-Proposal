name: ci-cd

on:
  push:
    branches: [ dev, master ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_REPOSITORY: marcofontana17/cce_prototipo

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-22.04
          - windows-2022
          - macos-12

        module:
          - name: "api_gateway"
            path: "./api_gateway"
          - name: "service"
            path: "./service"
          - name: "utils"
            path: "./utils"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true

      - name: Cache Go modules for ${{ matrix.module.name }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.module.name }}-${{ hashFiles(format('{0}/go.sum', matrix.module.path)) }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.module.name }}-
            ${{ runner.os }}-go-

      - name: Download dependencies for ${{ matrix.module.name }}
        working-directory: ${{ matrix.module.path }}
        run: go mod download

      - name: Verify dependencies for ${{ matrix.module.name }}
        working-directory: ${{ matrix.module.path }}
        run: go mod verify

      - name: Run tests for ${{ matrix.module.name }}
        working-directory: ${{ matrix.module.path }}
        run: go test -v ./...

      - name: Run tests with race detector for ${{ matrix.module.name }}
        working-directory: ${{ matrix.module.path }}
        run: go test -race -short ./...

      - name: Run tests with coverage for ${{ matrix.module.name }}
        working-directory: ${{ matrix.module.path }}
        run: go test -coverprofile=coverage.out ./...

      - name: Display coverage report for ${{ matrix.module.name }}
        working-directory: ${{ matrix.module.path }}
        run: go tool cover -func=coverage.out

      - name: Check test coverage threshold for ${{ matrix.module.name }}
        working-directory: ${{ matrix.module.path }}
        run: |
          if [ -f coverage.out ]; then
            COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
            echo "Total coverage for ${{ matrix.module.name }}: ${COVERAGE}%"
          else
            echo "No coverage file found for ${{ matrix.module.name }}, skipping coverage check"
          fi

#      - name: Upload coverage to Codecov for ${{ matrix.module.name }}
#        uses: codecov/codecov-action@v4
#        with:
#          file: ${{ matrix.module.path }}/coverage.out
#          flags: ${{ matrix.module.name }}
#          name: codecov-${{ matrix.module.name }}
#        continue-on-error: true

  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Images
    needs: test  # This ensures tests must pass before building

    strategy:
      matrix:
        service:
          - name: "api_gateway"
            dockerfile: "./api_gateway/Dockerfile"
            suffix: "api_gateway"
          - name: "service"
            dockerfile: "./service/Dockerfile"
            suffix: "service"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract metadata for ${{ matrix.service.name }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=raw,value=${{ matrix.service.suffix }}-latest,enable=${{ github.ref == 'refs/heads/master' }}
            type=raw,value=${{ matrix.service.suffix }}-dev-latest,enable=${{ github.ref == 'refs/heads/dev' }}
            type=sha,prefix=${{ github.ref_name }}-,suffix=-${{ matrix.service.suffix }}

      - name: Build and push ${{ matrix.service.name }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max